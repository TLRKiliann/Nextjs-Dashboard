import type { Metadata } from 'next';
import { auth } from '@/auth';
import { PrismaClient } from '@prisma/client';
import React, { Suspense } from 'react';
import { redirect } from 'next/navigation';
import ShoppingCartPage from '@/components/products-and-cart/ShoppingCart';
import Loader from '@/components/Loader';

export const metadata: Metadata = {
    title: "Cart",
    description: 'Generated by NextJS14',
};

const prisma = new PrismaClient();

export default async function CartPage() {

    const session = await auth();
    const userSession = session?.user;
    
    if (!userSession) {
        return redirect("/api/auth/signin");
    };
    
    /*
        user is allowed to update quantity with 
        server-action
    */
    const user = await prisma.user.findUnique({
        where: {
            email: userSession.email!,
        },
        include: {
            products: {
                orderBy: {
                    id: "asc"
                }
            }
        },
    });
    
    if (!user) {
        throw new Error("Error: useQuery + server action");
    };

    return (
        <React.Fragment>
            <Suspense fallback={<Loader />}>
                <ShoppingCartPage products={user?.products} />
            </Suspense>
        </React.Fragment>
    )
};
